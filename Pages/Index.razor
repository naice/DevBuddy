
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using DevBuddy.Controls
@using DevBuddy.Controls.Overlay
@using DevBuddy.Services
@using System.Text.RegularExpressions

@page "/"
@attribute [NavigationPage("WorkLog", icon: "event_note", sort: 0)]

@implements IDisposable

@inject IClipboardService Clipboard
@inject ILogger<Index> Log
@inject SimpleStorage<Model.Configuration> Configuration
@inject SimpleStorage<string, WorkLogTextStorage> WorkLogStorage
@inject IOverlayService OverlayService

<RadzenTextArea @ref="_textArea" class="w-100" Rows="5" style="font-family: 'Lucida Console', 'Courier New', Courier, monospace !important; font-size: 10px !important;" spellcheck="false"
    Placeholder="@_sampleWorkLogString" 
    @oninput="(x) => OnTextInput(x?.Value?.ToString())"/>

@if (_workLogs.Any() && _workLogParser != null && _workLogParser.WorkWeek.Days.Any())
{
<table>
    <tr>
        <th><RadzenText TextStyle="TextStyle.Overline">KW @(_workLogParser.WorkWeek.CalendarWeek.ToString("00"))</RadzenText></th>
        @foreach(var workDay in _workLogParser.WorkWeek.Days)
        {
            var isToday = workDay.Day == _today;
            <th class="@(isToday ? "today" : string.Empty)">
                <RadzenText TextStyle="TextStyle.Overline">@(workDay.Day.ToString("ddd.")) @(workDay.Day.ToString("dd.MM"))</RadzenText>
            </th>
        }
    </tr>
    @foreach(var workTimeGroup in _workLogs.SelectMany(x => x.WorkTimes).GroupBy(x => x.Description))
    {
        <tr>
            <td> 
                <span class="copy" @onclick="@(() => Clipboard.CopyToClipboard(workTimeGroup.Key ?? string.Empty))">
                    @workTimeGroup.Key
                </span>
                @foreach(var ticketLink in workTimeGroup.SelectMany(x => x.TicketLink).Distinct())
                {
                    <br/><a href="@(ticketLink.UrlTemplate.Replace("%TICKET%", ticketLink.Value))" target="_blank">@ticketLink.Value</a>
                }
                
            </td>
            @foreach(var workDay in _workLogParser.WorkWeek.Days)
            {
                var workTimeSec = workTimeGroup.Where(x => x.Day == workDay.Day).Sum(x => x.TimeSpan?.TotalSeconds ?? 0);
                var workTime = TimeSpan.FromSeconds(workTimeSec);
                var isToday = workDay.Day == _today;
                <td class="@(isToday ? "today" : string.Empty)">
                    @if (workTime > TimeSpan.Zero)
                    {
                        var workTimeText = workTime.Hours.ToString("00")+"h " + workTime.Minutes.ToString("00") + "m";
                        <span class="copy" @onclick="@(() => Clipboard.CopyToClipboard(workTimeText))">
                            @(workTimeText)
                        </span>
                    }
                </td>
            }
        </tr>
    }
    <tr>
        <td> <strong> Summe </strong> </td>
        @foreach(var workDay in _workLogParser.WorkWeek.Days)
        {
            var workTimeTotalSec = _workLogs.SelectMany(x => x.WorkTimes).Where(x => x.Day == workDay.Day).Sum(x => x.TimeSpan?.TotalSeconds ?? 0);
            var workTimeTotal = TimeSpan.FromSeconds(workTimeTotalSec);
            var workTimeClass = "copy " + (
                workDay.TargetWorkTime.Time == workTimeTotal ? "onDue" : 
                workDay.TargetWorkTime.Time < workTimeTotal ? "overDue" : "underDue");
            var isToday = workDay.Day == _today;
            <td class="@(isToday ? "today" : string.Empty)">
                @if (workTimeTotal > TimeSpan.Zero)
                {
                    var workTimeText = workTimeTotal.Hours.ToString("00")+"h " + workTimeTotal.Minutes.ToString("00") + "m";
                    <strong class="@workTimeClass" @onclick="@(() => Clipboard.CopyToClipboard(workTimeText))">
                        @(workTimeText)
                    </strong>
                }
            </td>
        }
    </tr>
</table>
}

@code
{
    private class WorkLogTextStorage {}
    private const string _sampleWorkLogString = @"mo Ticket-123 2h, Ticket-321 3h 15m, 
di Ticket-321 4h 45m, Ticket-333 2h 15m
mi Ticket-321 1h
donnerstag Ticket-333 8h, Ticket-3211 1h
fr Ticket-999 8h";

    private List<WorkLog> _workLogs = new List<WorkLog>();
    private RadzenTextArea _textArea = default!;

    BehaviorSubject<string> _workLogText;
    IObservable<List<WorkLog>> _workLogsObservable;
    List<IDisposable> _subscriptions = new List<IDisposable>();

    DateTime _today = DateTime.Today;
    
    WorkLogParser? _workLogParser;

    public Index()
    {
        _workLogText = new BehaviorSubject<string>("");
        _workLogsObservable = _workLogText.Select(x => {
            var _ =_workLogParser ?? throw new Exception();
            var result = _workLogParser.ParseWorkLogInput(x);
            if (result.Count == 0)
                result = _workLogParser.ParseWorkLogInput(_sampleWorkLogString);
            return result;
        });
    }
    protected override async Task OnInitializedAsync()
    {
        var config = await Configuration.GetAsync(Model.Configuration.DEFAULT_CONFIG.Clone());
        _workLogParser = new WorkLogParser(DateTime.Now, config!.WorkLogConfiguration.TargetWorkTimeByDayOfWeek, config!.WorkLogConfiguration.TicketLinks);
        string? workLogString = await WorkLogStorage.GetAsync();
        _textArea.Value = workLogString ?? string.Empty;
        if (string.IsNullOrEmpty(workLogString))
        {
            workLogString = _sampleWorkLogString;
        }

        _subscriptions.Add(
            _workLogText.Throttle(TimeSpan.FromSeconds(1)).Subscribe(async x => {
                if (x != _sampleWorkLogString)
                    await WorkLogStorage.SetAsync(x);
            })
        );
        _workLogText.OnNext(workLogString);
        _subscriptions.Add(_workLogsObservable.Subscribe(x => _workLogs = x));

        await base.OnInitializedAsync();
    }

    private void OnTextInput(string? text)
    {
        if (string.IsNullOrEmpty(text))
        {
            text = _sampleWorkLogString;
        }
        _workLogText.OnNext(text);
    }

    public void Dispose()
    {
        _subscriptions.ForEach(x => x.Dispose());
    }
}