
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using DevBuddy.Controls
@using DevBuddy.Controls.Overlay
@using DevBuddy.Services
@using System.Text.RegularExpressions

@page "/"
@attribute [NavigationPage("WorkLog", image: "image/worklog.png", sort: 0)]

@inject IClipboardService Clipboard
@inject ILogger<Index> Log
@inject SimpleStorage<List<WorkWeek>> WorkWeeksStorage
@inject SimpleStorage<List<WorkLog>> WorkLogStorage
@inject IOverlayService OverlayService

<RadzenTextArea class="w-100" Rows="5" style="font-family: 'Lucida Console', 'Courier New', Courier, monospace !important; font-size: 10px !important;" spellcheck="false"
    Placeholder="Mo AFO-123 Arbeit arbeit 2h 30m" 
    @oninput="(x) => ParseWorkLogInput(x?.Value?.ToString())"/>

@if (_workLogs.Any() && _workLogParser.WorkWeek.Days.Any())
{
<table>
    <tr>
        <th></th>
        @foreach(var day in _workLogParser.WorkWeek.Days)
        {
            <th>@(day.Day.ToString("ddd.")) <span style="font-size: smaller;">@(day.Day.ToString("dd.MM"))</span></th>
        }
    </tr>
    @foreach(var workTimeGroup in _workLogs.SelectMany(x => x.WorkTimes).GroupBy(x => x.Description))
    {
        <tr>
            <td> 
                <span style="cursor: pointer;" @onclick="@(() => Clipboard.CopyToClipboard(workTimeGroup.Key ?? string.Empty))">
                    @workTimeGroup.Key
                </span>
                
            </td>
            @foreach(var workDay in _workLogParser.WorkWeek.Days)
            {
                var workTimeSec = workTimeGroup.Where(x => x.Day == workDay.Day).Sum(x => x.TimeSpan?.TotalSeconds ?? 0);
                var workTime = TimeSpan.FromSeconds(workTimeSec);

                <td>
                    @if (workTime > TimeSpan.Zero)
                    {
                        var workTimeText = workTime.Hours.ToString("00")+"h " + workTime.Minutes.ToString("00") + "m";
                        <span style="cursor: pointer;" @onclick="@(() => Clipboard.CopyToClipboard(workTimeText))">
                            @(workTimeText)
                        </span>
                    }
                </td>
            }
        </tr>
    }
    <tr>
        <td> <strong> Summe </strong> </td>
        @foreach(var workDay in _workLogParser.WorkWeek.Days)
        {
            var workTimeTotalSec = _workLogs.SelectMany(x => x.WorkTimes).Where(x => x.Day == workDay.Day).Sum(x => x.TimeSpan?.TotalSeconds ?? 0);
            var workTimeTotal = TimeSpan.FromSeconds(workTimeTotalSec);
            var workTimeColor = "cursor: pointer; color: " + (
                workDay.TargetWorkTime == workTimeTotal ? "blue" : 
                workDay.TargetWorkTime < workTimeTotal ? "green" : "red");
            <td>
                @if (workTimeTotal > TimeSpan.Zero)
                {
                    var workTimeText = workTimeTotal.Hours.ToString("00")+"h " + workTimeTotal.Minutes.ToString("00") + "m";
                    <strong style="@workTimeColor" @onclick="@(() => Clipboard.CopyToClipboard(workTimeText))">
                        @(workTimeText)
                    </strong>
                }
            </td>
        }
    </tr>
</table>
}

@code
{
    private string test = @"mo afo-123123 2h, afo-321 3h 15m, 
di afo-321 4h 45m
mi afo-321 1h
donnerstag afo-333 8h, afo-3211 1h
fr afo-999 9h 45m";

    private List<WorkLog> _workLogs = new List<WorkLog>();

    BehaviorSubject<List<WorkLog>> _workLogSubject = new BehaviorSubject<List<WorkLog>>(new List<WorkLog>());
    IDisposable? _subscription = null;
    
    WorkLogParser _workLogParser = new WorkLogParser(DateTime.Now, DayOfWeek.Monday, DayOfWeek.Friday, TimeSpan.FromHours(8));
    protected override void OnInitialized()
    {
        Log.LogWarning("Hallo");
        _subscription = _workLogSubject.Subscribe(x => { _workLogs = x; Log.LogInformation("Parsed Work Log " + System.Text.Json.JsonSerializer.Serialize(x, new System.Text.Json.JsonSerializerOptions() { WriteIndented = true })); });
    }

    private void ParseWorkLogInput(string? value)
    {
        _workLogSubject.OnNext(_workLogParser.ParseWorkLogInput(value));
    }
}